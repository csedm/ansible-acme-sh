---
- name: Validate acme_sh_install_state parameter
  ansible.builtin.fail:
    msg: "invalid value for acme_sh_install_state: {{ acme_sh_install_state }}"
  when: >
    acme_sh_install_state is not 'present' or
    acme_sh_install_state is not 'absent' or
    acme_sh_install_state is not 'latest'

- name: Determine if acme.sh is installed
  stat:
    path: "{{ acme_sh_install_path }}/acme.sh"
  register: is_acme_sh_installed

- name: Install acme.sh
  ansible.builtin.import_tasks: install.yml
  when:
  - acme_sh_install_state is 'present'
  - not is_acme_sh_installed.stat.exists

- name: Upgrade acme.sh
  command: |
    {{ acme_sh_install_path }}/acme.sh --upgrade
  when:
    - acme_sh_install_state is 'latest'
    - is_acme_sh_installed.stat.exists
  register: upgrade_result
  changed_when: upgrade_result.rc == 0 and "Upgrade success" in upgrade_result.stdout

- name: Uninstall acme.sh
  ansible.builtin.import_tasks: uninstall.yml
  when:
  - acme_sh_install_state is 'absent'
  - is_acme_sh_installed.stat.exists

- name: Create path to copy certs to
  file:
    path: "{{ acme_sh_copy_certs_to_path }}"
    state: "directory"
    owner: "{{ acme_sh_become_user }}"
    group: "{{ acme_sh_become_user }}"
    mode: "0755"
  when: not acme_sh_uninstall


#- name: Run custom acme.sh command
#  command: ./acme.sh {{ item.custom_command }}
#  args:
#    chdir: "~/.acme.sh"
#  environment: "{{ item.dns_provider_api_keys | default(acme_sh_default_dns_provider_api_keys) }}"
#  loop: "{{ acme_sh_domains }}"
#  when:
#    - acme_sh_domains and item.domains is defined and item.domains
#    - item.dns_provider | default(acme_sh_default_dns_provider)
#    - item.dns_provider_api_keys | default(acme_sh_default_dns_provider_api_keys)
#    - item.custom_command is defined and item.custom_command
#    - item.remove is undefined or not item.remove
#    - not acme_sh_uninstall
#  become_user: "{{ acme_sh_become_user }}"

- name: Issue acme.sh certificate(s) (this will sleep for dns_sleep seconds)
  command: >-
    ./acme.sh --issue -d {{ item.domains | join(" -d ") }}
    --dns {{ item.dns_provider | default(acme_sh_default_dns_provider) }}
    --dnssleep {{ item.dns_sleep | default(acme_sh_default_dns_sleep) }}
    {{ "--force" if item.force_issue | default(acme_sh_default_force_issue) else "" }}
    {{ "--staging" if item.staging | default(acme_sh_default_staging) else "" }}
    {{ "--debug" if item.debug | default(acme_sh_default_debug) else "" }}
    {{ "--pre-hook " + '"' + item.issue_pre_hook | default(acme_sh_default_issue_pre_hook) + '"' if item.issue_pre_hook | default(acme_sh_default_issue_pre_hook) else "" }}
    {{ "--post-hook " + '"' + item.issue_post_hook | default(acme_sh_default_issue_post_hook) + '"' if item.issue_post_hook | default(acme_sh_default_issue_post_hook) else "" }}
    {{ "--renew-hook " + '"' + item.issue_renew_hook | default(acme_sh_default_issue_renew_hook) + '"' if item.issue_renew_hook | default(acme_sh_default_issue_renew_hook) else "" }}
    {{ item.extra_flags_issue | default(acme_sh_default_extra_flags_issue) }}
  args:
    chdir: "~/.acme.sh"
  environment: "{{ item.dns_provider_api_keys | default(acme_sh_default_dns_provider_api_keys) }}"
  loop: "{{ acme_sh_domains }}"
  when:
    - acme_sh_domains and item.domains is defined and item.domains
    - item.dns_provider | default(acme_sh_default_dns_provider)
    - item.dns_provider_api_keys | default(acme_sh_default_dns_provider_api_keys)
    - item.force_renew is undefined or not item.force_renew
    - item.custom_command is undefined or not item.custom_command
    - item.remove is undefined or not item.remove
    - not acme_sh_uninstall
  become_user: "{{ acme_sh_become_user }}"
  register: issue_result
  changed_when: issue_result.rc == 0 and "Cert success" in issue_result.stdout
  failed_when: issue_result.rc != 0 and "Domains not changed" not in issue_result.stdout

- name: Force renew acme.sh certificate(s)
  command: >-
    ./acme.sh --renew -d {{ item.domains | first }} --force
    {{ "--debug" if item.debug | default(acme_sh_default_debug) else "" }}
    {{ item.extra_flags_renew | default(acme_sh_default_extra_flags_renew) }}
  args:
    chdir: "~/.acme.sh"
  loop: "{{ acme_sh_domains }}"
  when:
    - acme_sh_domains and item.domains is defined and item.domains
    - item.force_issue is undefined or not item.force_issue
    - item.force_renew is defined and item.force_renew
    - item.remove is undefined or not item.remove
    - not acme_sh_uninstall
  become_user: "{{ acme_sh_become_user }}"
  register: renew_result
  failed_when: renew_result.rc != 0 and "Reload error for" not in renew_result.stderr

- name: Ensure installed certificates have correct user / group ownership
  file:
    path: "{{ acme_sh_copy_certs_to_path }}/{{ item.domains | first }}*"
    group: "{{ acme_sh_become_user }}"
    owner: "{{ acme_sh_become_user }}"
    mode: "0644"
  loop:
    - "{{ acme_sh_domains }}"
  when:
    - acme_sh_domains and item.domains is defined and item.domains
    - item.custom_command is undefined or not item.custom_command
    - item.remove is undefined or not item.remove
    - not acme_sh_uninstall

- name: Install acme.sh certificate(s)
  command: >-
    ./acme.sh --install-cert -d {{ item.domains | first }}
    --key-file {{ acme_sh_copy_certs_to_path }}/{{ item.domains | first }}.key
    --fullchain-file {{ acme_sh_copy_certs_to_path }}/{{ item.domains | first }}.pem
    --reloadcmd "{{ item.install_cert_reloadcmd | default(acme_sh_default_install_cert_reloadcmd) }}"
    {{ "--debug" if item.debug | default(acme_sh_default_debug) else "" }}
    {{ item.extra_flags_install_cert | default(acme_sh_default_extra_flags_install_cert) }}
  args:
    chdir: "~/.acme.sh"
  loop: "{{ acme_sh_domains }}"
  loop_control:
    index_var: domains_index
  when:
    - acme_sh_domains and item.domains is defined and item.domains
    - item.custom_command is undefined or not item.custom_command
    - item.remove is undefined or not item.remove
    - not acme_sh_uninstall
  become_user: "{{ acme_sh_become_user }}"
  register: install_cert_result
  changed_when: issue_result.results[domains_index].changed or renew_result.results[domains_index].changed
  failed_when: install_cert_result.rc != 0 and "Reload error for" not in install_cert_result.stderr

# Display results
- name: Register acme.sh certificate information
  command: ./acme.sh --list
  args:
    chdir: "~/.acme.sh"
  when: acme_sh_list_domains and not acme_sh_uninstall
  changed_when: False
  register: list_domains
  become_user: "{{ acme_sh_become_user }}"

- name: List acme.sh certificate information
  debug:
    msg: "{{ list_domains.stdout_lines }}"
  when: not ansible_check_mode and acme_sh_list_domains and not acme_sh_uninstall
