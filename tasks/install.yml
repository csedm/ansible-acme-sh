---
- name: Ensure needed directories exist
  ansible.builtin.file:
    state: directory
    path: "{{ item }}"
  with_items:
  - "{{ acme_sh_tmp_download_path }}"
  - "{{ acme_sh_install_path }}"
  - "{{ acme_sh_config_home }}"
  - "{{ acme_sh_cert_home }}"

- name: Get the latest release published on GitHub
  ansible.builtin.uri:
    url: "{{ acme_sh_git_releases_api_url }}"
  register: acme_sh_github_release

- name: Download acme.sh release tarball from GitHub
  ansible.builtin.uri:
    url: "{{ acme_sh_github_release.json.tarball_url }}"
    dest: "{{ acme_sh_tmp_download_path }}/acmesh.tar.gz"

- name: Unzip acme.sh release tarball (OpenBSD)
  ansible.builtin.command:
    cmd: |
      tar xzf {{ acme_sh_tmp_download_path }}/acmesh.tar.gz }} -C {{ acme_sh_tmp_download_path }}/acmesh
  when: ansible_os_family == 'OpenBSD'

- name: Unzip acme.sh release tarball
  ansible.builtin.unarchive:
      src: "{{ acme_sh_tmp_download_path }}/acmesh.tar.gz"
      dest: "{{ acme_sh_tmp_download_path }}/acmesh"
      remote_src: yes
  ignore_errors: "{{ ansible_check_mode }}"
  when: ansible_os_family != 'OpenBSD'

# Figure out what vars to use here, put them in defaults, etc...
- name: Install acme.sh
  ansible.builtin.command:
    cmd: | 
     {{ acme_sh_tmp_download_path }}/acme.sh --install -m {{ acme_sh_account_email }} \
               --home {{ acme_sh_install_path }} \
               --config-home {{ acme_sh_config_home }} \
               --cert-home {{ acme_sh_cert_home }} \
               --days {{ acme_sh_renew_time_in_days }}
  args:
    creates: "{{ acme_sh_install_path }}/acme.sh"

- name: Remove temporary download files
  ansible.builtin.file:
    state: absent
    path: "{{ item }}"
  with_items:
  - "{{ acme_sh_tmp_download_path }}/acmesh"
  - "{{ acme_sh_tmp_download_path }}/acmesh.tar.gz"
...